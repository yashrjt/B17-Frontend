pl-sql procedural language

---functions   returns data mandatory
---procedures  may or may not return any data
---triggers
--cursors


datatypes:
record,rowtype

---anonymous block


--select * from employee;

declare
s_name varchar(20):='Alex';
s_id int:=100;
s_num int not null default 90;
e_rec employee%rowtype;
begin
e_rec.empid:=1009;
e_rec.empname:='Kenny';
e_rec.empcity:='dallas';
e_rec.empsalary:=8000;
dbms_output.put_line(e_rec.empname);
end;



declare
type Staff_record is record(staff_name varchar(20),staff_id int,staff_city VARCHAR(20));

Holland_record Staff_record;
begin

Holland_record.staff_name:='Holland';
Holland_record.staff_id:=101;
Holland_record.staff_city:='Belgium';
dbms_output.put_line(Holland_record.staff_city);
end;


--loops


declare
salgrade varchar(2):='B';
salary int;
begin
case
when salgrade='A' then
salary:=12000;
when salgrade='B' then
salary:=10000;
when salgrade='C' then
salary:=8000;
end case;
dbms_output.put_line(salary);
end;





declare
salary int:=8000;
begin
if salary>8000 then 
dbms_output.put_line('Sal grade A or B');
else if salary<=8000 then 
dbms_output.put_line('Sal g=rade C');
end if;
end if;
end;


declare

begin
for var in 0..5 loop
dbms_output.put_line(var);
end loop;
end;


--exception
declare
myvar int;
begin
myvar:=57651432654238754329423497987986876867567857656746535434;
end;


declare
myvar int;
number_precision exception;
PRAGMA EXCEPTION_INIT(number_precision, -6502);
begin
myvar:=57651432654238754329423497987986876867567857656746535434;
exception 
when number_precision then
dbms_output.put_line('You have assigned a very big number');
end;



declare
copy_empname employee.empname%type;
begin
select empnam into copy_empname  from employee where empid=1;

exception
when too_many_rows then
dbms_output.put_line('multiple results');
when others then
dbms_output.put_line('something else wrong');
dbms_output.put_line(sqlerrm);
dbms_output.put_line(sqlcode);
end;


---Functions
---returns data mandatorily
create or replace function get_sal_grade(empsalary employee.empsalary%type) return VARCHAR2 as 
sal_grade varchar(2);
begin
if empsalary>8000 then 
dbms_output.put_line('Sal grade A ');
sal_grade:='B';
else if empsalary<=8000 then 
dbms_output.put_line('Sal g=rade C');
sal_grade:='C';
end if;
end if;
return sal_grade ;
end;


select empid,empname,get_sal_grade(empsalary) from employee where empid=1001;



--PROCEDURES
--may or may not return any data
--perform somethingin the table

create or replace procedure update_emp as
p_emp_id  employee.empid%type:=1001;
begin
update employee set empsalary=8500 where empid=p_emp_id;
exception
when others then
dbms_output.put_line(sqlerrm);
dbms_output.put_line(sqlcode);
end update_emp ;


exec update_emp;



--passing In parameters

create or replace procedure update_emp_city(p_emp_id IN employee.empid%type,p_emp_city IN employee.empcity%type) is
begin
update employee set empcity=p_emp_city where empid=p_emp_id;
exception
when others then
dbms_output.put_line(sqlerrm);
dbms_output.put_line(sqlcode);
end update_emp_city ;


declare
p_emp_id employee.empid%type:=1002;
p_emp_city employee.empcity%type:='Los Angeles';
begin
update_emp_city(p_emp_id ,p_emp_city);
end;


--passing IN/OUT paraameters
create or replace procedure update_emp_city_copy(p_emp_id IN employee.empid%type,p_emp_city IN employee.empcity%type,p_emp_name OUT employee.empname%type) is
begin
update employee set empcity=p_emp_city where empid=p_emp_id RETURNING empname into p_emp_name;
exception
when others then
dbms_output.put_line(sqlerrm);
dbms_output.put_line(sqlcode);
end update_emp_city_copy ;


declare
p_emp_id employee.empid%type:=1003;
p_emp_city employee.empcity%type:='Cleveland';
p_emp_name employee.empname%type;
begin
update_emp_city_copy(p_emp_id ,p_emp_city,p_emp_name);
dbms_output.put_line(p_emp_name);
end;



--cursors
-pointer to the memory area/context area

--implicit cursor,explicit cursor
--SQL%FOUND
--SQL%NOTFOUND
--SQL%ISOPEN
--SQL%ROWCOUNT


--triggers

--dml ,ddl commands

System events--
server errors
dd startup/shutdown
user logsin/logsoff 



statement level(table level)
row level

---TRIGGERS

---statement level triggers(table level)
create or replace trigger emp_before_trigger
before update on employee

begin
dbms_output.put_line('Emp table is going to be updated');
end;


create or replace trigger emp_after_trigger
after update on employee

begin
dbms_output.put_line('Emp table has been updated');
end;


update employee set empcity='London' where empid=1005;
update employee set empcity='Scotland' where empid=1006;



---row level triggers

create or replace trigger emp_before_row_trigger
before update on employee
for each row
begin
dbms_output.put_line('Emp table row is going to be updated');
end;


create or replace trigger emp_after_row_trigger
after update on employee
for each row
begin
dbms_output.put_line('Emp table  row has been updated');
end;



update employee set empcity='Houston' where empid=1007;
update employee set empcity='Blvd' where empid=1008;


alter trigger emp_after_row_trigger disable;


drop trigger emp_after_row_trigger;